import arena from '@/arena';
import { LogService } from '@/arena/LogService';
import { type ItemComponent, itemComponentName, reservedClanName } from '@fwo/shared';
import { bold } from '@/utils/formatString';
import { profsData } from '@/data/profs';
import { bot } from '@/bot';
import { DonationHelper } from '@/helpers/donationHelper';

const MAX_MESSAGE_LENGTH = 2 ** 12;
const chatId = process.env.BOT_CHATID || -1001483444452;

export async function sendBattleLogMessages(messages: string[]) {
  let messageToSend = '';

  for await (const message of messages) {
    const nextMessageToSend = messageToSend.concat('\n\n', message);

    if (messageToSend.length > MAX_MESSAGE_LENGTH) {
      await broadcast(messageToSend);
      messageToSend = message;
    } else {
      messageToSend = nextMessageToSend;
    }
  }
  await broadcast(messageToSend);
}
/**
 * @param data - —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param id - id —á–∞—Ç–∞
 */
export async function broadcast(data: string, id: number | string = chatId): Promise<void> {
  try {
    await bot.api.sendMessage(id, data, { parse_mode: 'Markdown' });
  } catch (e) {
    console.error(`error: broadcast: ${e.message} for ${id}`);
  }
}

export const initGameChannel = () => {
  arena.mm.on('push', ({ id }) => {
    const character = arena.characters[id];
    if (character) {
      broadcast(
        `–ò–≥—Ä–æ–∫ ${character.clan ? `\\[${character.clan.name}\] ` : ''}${bold(character.nickname)} (${profsData[character.prof].icon}${character.lvl}) –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –∏–≥—Ä—ã!`,
      );
    }
  });

  arena.mm.on('pull', ({ id }) => {
    const character = arena.characters[id];
    if (character) {
      broadcast(
        `–ò–≥—Ä–æ–∫ ${character.clan ? `\\[${character.clan.name}\] ` : ''}${bold(character.nickname)} (${profsData[character.prof].icon}${character.lvl}) –ø–µ—Ä–µ–¥—É–º–∞–ª...`,
      );
    }
  });

  arena.mm.on('start', (game) => {
    const log = new LogService(sendBattleLogMessages);
    broadcast('–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è');

    game.on('startOrders', () => {
      broadcast('–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã');
    });
    game.on('startRound', (e) => {
      broadcast(`‚ö°Ô∏è –†–∞—É–Ω–¥ ${e.round} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è ‚ö°`);
    });
    game.on('endRound', async (e) => {
      await log.sendBattleLog(e.log);
      if (e.dead.length) {
        await broadcast(`–ü–æ–≥–∏–±—à–∏–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ: ${e.dead.map(({ nick }) => nick).join(', ')}`);
      }
    });
    game.on('kick', ({ player }) => {
      broadcast(`–ò–≥—Ä–æ–∫ ${bold(player.nick)} –±—ã–ª –≤—ã–±—Ä–æ—à–µ–Ω –∏–∑ –∏–≥—Ä—ã`);
    });

    game.on('end', async (e) => {
      const getStatusString = (p: {
        exp: number;
        gold: number;
        nick: string;
        component?: ItemComponent;
        winner?: boolean;
      }) =>
        `\t${p.winner ? 'üèÜ' : 'üë§'} ${p.nick} –ø–æ–ª—É—á–∞–µ—Ç ${p.exp}üìñ, ${p.gold}üí∞${p.component ? `, 1 ${itemComponentName[p.component]}` : ''}`;

      await broadcast('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      await broadcast(`${bold`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã`}
${Object.entries(e.statistic)
  .map(
    ([clan, players]) =>
      `${bold(clan === reservedClanName ? '–ë–µ–∑ –∫–ª–∞–Ω–∞' : clan)}:\n${players?.map(getStatusString).join('\n')}`,
  )
  .join('\n\n')}`);

      if (DonationHelper.shouldAnnounce()) {
        const donators = await DonationHelper.getDonators();

        if (donators.length) {
          await broadcast(`${bold('–ü–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏–µ –ø—Ä–æ–µ–∫—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:')}
${donators.map((donator) => `‚≠ê ${bold(donator.nickname)}`).join('\n')}
          
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!`);
          DonationHelper.resetLastAnnouncement();
        }
      }
    });
  });
};
